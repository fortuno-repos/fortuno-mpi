name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  BUILD_DIR: _build
  INSTALL_DIR: _install

jobs:

  #
  # Test Fortuno in various system configurations
  #
  fortuno-test:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [intel, gnu]
        mpi: [impi, openmpi, mpich]
        exclude:
          # Intel compiler should not be tested with OpenMPI (only with Intel MPI)
          - compiler: intel
            mpi: openmpi
          # Intel compiler should not be tested with MPICH (only with Intel MPI)
          - compiler: intel
            mpi: mpich
          # GNU compiler should be not be tested with IntelMPI (only with OpenMPI and MPICH)
          - compiler: gnu
            mpi: impi
          # MacOS has no Intel compiler
          - os: macos-latest
            compiler: intel
          # CMake config file of OpenMPI is broken on ubuntu 22.04
          - os: ubuntu-latest
            mpi: openmpi
          # MPICH on MacOS lacks mpi_f08 interface
          - os: macos-latest
            mpi: mpich

    steps:

      - name: Check-out code
        uses: actions/checkout@v4

      - name: Setup Intel compiler
        if: ${{ contains(matrix.compiler, 'intel') }}
        uses: rscohn2/setup-oneapi@v0
        with:
          # Note: icx is needed to avoid linking error when using MPI
          components: |
            ifx
            icx
            impi

      - name: Setup Intel environment
        if: ${{ contains(matrix.compiler, 'intel') }}
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> ${GITHUB_ENV}
          echo "FC=ifx" >> ${GITHUB_ENV}
          echo "FPM_FC=ifx" >> ${GITHUB_ENV}
          # Overriding default FPM_FFLAGS as default setting contains '-standard-semantics'
          # which is incompatible with intel MPI.
          echo "FPM_FFLAGS='-warn all -check all,nouninit -error-limit 1 -O0 -g -stand f18 -traceback'" >> ${GITHUB_ENV}

      - name: Setup GNU compiler
        if: ${{ contains(matrix.compiler, 'gnu') }}
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 13

      - name: Setup GNU environment
        if: ${{ contains(matrix.compiler, 'gnu') }}
        run: |
          echo "FC=${{ env.FC }}" >> ${GITHUB_ENV}
          echo "FPM_FC=${{ env.FC }}" >> ${GITHUB_ENV}

      - name: Setup OpenMPI on Ubuntu
        if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.mpi, 'openmpi') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-common openmpi-bin

      - name: Setup OpenMPI on MacOS
        if: ${{ contains(matrix.os, 'macos') && contains(matrix.mpi, 'openmpi') }}
        run: |
          brew install open-mpi

      - name: Setup MPICH on Ubuntu
        if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.mpi, 'mpich') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y mpich

      - name: Setup MPICH on MacOS
        if: ${{ contains(matrix.os, 'macos') && contains(matrix.mpi, 'mpich') }}
        run: |
          brew install mpich

      - name: Setup build tools
        run: |
          pip install cmake fpm meson ninja

      - name: Build Fortuno
        run: |
          cmake -B ${BUILD_DIR} -G Ninja -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
          cmake --build ${BUILD_DIR}
          cmake --install ${BUILD_DIR}
          rm -rf ${BUILD_DIR}

      - name: Test CMake export
        run: |
          CMAKE_PREFIX_PATH=${INSTALL_DIR} cmake -B ${BUILD_DIR} -G Ninja test/export
          cmake --build ${BUILD_DIR}
          mpirun -n 2 ${BUILD_DIR}/app/testapp
          rm -rf ${BUILD_DIR}

      - name: Test fpm export
        run: |
          cd test/export
          fpm run testapp

      - name: Test Meson pkgconfig export
        # Meson detects only OpenMPI reliably (as of version 1.3.2)
        if: ${{ contains(matrix.mpi, 'openmpi') }}
        run: |
          export PKG_CONFIG_PATH="${PWD}/${INSTALL_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}"
          cd test/export
          meson setup --wrap-mode nofallback ${BUILD_DIR}
          ninja -C ${BUILD_DIR}
          mpirun -n 2 ${BUILD_DIR}/testapp
          rm -rf ./${BUILD_DIR}

      - name: Test Meson subproject export
        # Meson detects only OpenMPI reliably (as of version 1.3.2)
        if: ${{ contains(matrix.mpi, 'openmpi') }}
        run: |
          FORTUNO_MPI_DIR=${PWD}
          GIT_REV=$(git rev-parse HEAD)
          cd test/export
          mkdir subprojects
          echo -e "[wrap-git]\ndirectory=fortuno-mpi\n" > subprojects/fortuno-mpi.wrap
          echo -e "url=file://${FORTUNO_MPI_DIR}\nrevision=${GIT_REV}\n" >> subprojects/fortuno-mpi.wrap
          meson setup --wrap-mode forcefallback ${BUILD_DIR}
          ninja -C ${BUILD_DIR}
          mpirun -n 2 ${BUILD_DIR}/testapp
          rm -rf subprojects ${BUILD_DIR}
